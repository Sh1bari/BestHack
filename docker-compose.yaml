version: "3.8"

services:
  platform:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"
    image: registry.sh1bari.ru/hack/platform:1.0.0
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=productionv
    command: [ 'npm', 'run', 'start:platform' ]
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.platform.rule=Host(`fuel.hack.noxly.ru`)"
      - "traefik.http.routers.platform.entrypoints=websecure"
      - "traefik.http.routers.platform.tls=true"
      - "traefik.http.routers.platform.tls.certresolver=myresolver"
      - "traefik.http.services.platform.loadbalancer.server.port=3000"
      - "traefik.http.routers.platform.priority=26"
      - "traefik.docker.network=traefik_network"

  admin:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"
    image: registry.sh1bari.ru/hack/admin:1.0.0
    ports:
      - '3001:3001'
    environment:
      - NODE_ENV=production
    command: [ 'npm', 'run', 'start:admin' ]
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.admin.rule=Host(`admin.hack.noxly.ru`)"
      - "traefik.http.routers.admin.entrypoints=websecure"
      - "traefik.http.routers.admin.tls=true"
      - "traefik.http.routers.admin.tls.certresolver=myresolver"
      - "traefik.http.services.admin.loadbalancer.server.port=3001"
      - "traefik.http.routers.admin.priority=27"
      - "traefik.docker.network=traefik_network"

  sso:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"
    image: registry.sh1bari.ru/hack/sso:1.0.0
    ports:
      - '3002:3002'
    environment:
      - NODE_ENV=production
    command: [ 'npm', 'run', 'start:sso-ui' ]
    networks:
      - traefik_network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sso.rule=Host(`ui.auth.hack.noxly.ru`)"
      - "traefik.http.routers.sso.entrypoints=websecure"
      - "traefik.http.routers.sso.tls=true"
      - "traefik.http.routers.sso.tls.certresolver=myresolver"
      - "traefik.http.services.sso.loadbalancer.server.port=3002"
      - "traefik.http.routers.sso.priority=28"
      - "traefik.docker.network=traefik_network"

  auth:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: registry.sh1bari.ru/hack/auth:1.0.0
    environment:
      - POSTGRES_ADDRESS=authpostgres
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      - authpostgres
    networks:
      - traefik_network
      - my-custom-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authHack.rule=Host(`auth.noxly.ru`)"
      - "traefik.http.routers.authHack.entrypoints=websecure"
      - "traefik.http.routers.authHack.tls=true"
      - "traefik.http.routers.authHack.tls.certresolver=myresolver"
      - "traefik.http.services.authHack.loadbalancer.server.port=8080"
      - "traefik.http.routers.authHack.priority=21"
      - "traefik.docker.network=traefik_network"

  fuel:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: registry.sh1bari.ru/hack/fuel:1.0.0
    environment:
      - POSTGRES_ADDRESS=fuelpostgres
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      - fuelpostgres
    networks:
      - my-custom-network

  efs:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: registry.sh1bari.ru/hack/efs:1.0.0
    environment:
      - AUTH_SERVER_URL=http://auth:8080
      - AUTH_SERVER_TIMEOUT=3000
      - FUEL_SERVER_URL=http://fuel:8082
      - FUEL_SERVER_TIMEOUT=3000
    networks:
      - traefik_network
      - my-custom-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.efs.rule=Host(`hack.noxly.ru`)"
      - "traefik.http.routers.efs.entrypoints=websecure"
      - "traefik.http.routers.efs.tls=true"
      - "traefik.http.routers.efs.tls.certresolver=myresolver"
      - "traefik.http.services.efs.loadbalancer.server.port=8081"
      - "traefik.http.routers.efs.priority=25"
      - "traefik.docker.network=traefik_network"

  fuelpostgres:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: mirror.gcr.io/postgres:16.4-alpine
    networks:
      - my-custom-network
    restart: always
    environment:
      - POSTGRES_DB=fuel-seller
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg-data-fuel:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5435:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  authpostgres:
    deploy:
      mode: replicated
      replicas: 1
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на RU сервере
    image: mirror.gcr.io/postgres:16.4-alpine
    networks:
      - my-custom-network
    restart: always
    environment:
      - POSTGRES_DB=auth
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - pg-data-auth:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5434:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

volumes:
  pg-data-auth:
    driver: local
  pg-data-fuel:
    driver: local

networks:
  traefik_network:
    external: true
  my-custom-network:
    external: true
