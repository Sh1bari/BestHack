services:
  auth:
    deploy:
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на NL сервере
      replicas: 1
    build:
      context: ./Authorization
    environment:
      - POSTGRES_ADDRESS=authpostgres
      - POSTGRES_PORT=5432
      - POSTGRES_USERNAME=postgres
      - POSTGRES_PASSWORD=postgres
    depends_on:
      - authpostgres
    networks:
      - traefik_network
      - my-custom-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth.rule=Host(`auth.sh1bari.ru`)"
      - "traefik.http.routers.auth.entrypoints=websecure"
      - "traefik.http.routers.auth.tls=true"
      - "traefik.http.routers.auth.tls.certresolver=myresolver"
      - "traefik.http.services.auth.loadbalancer.server.port=8080"

  efs:
    deploy:
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на NL сервере
      replicas: 1
    build:
      context: ./EFS
    networks:
      - traefik_network
      - my-custom-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.efs.rule=Host(`hack.sh1bari.ru`)"
      - "traefik.http.routers.efs.entrypoints=websecure"
      - "traefik.http.routers.efs.tls=true"
      - "traefik.http.routers.efs.tls.certresolver=myresolver"
      - "traefik.http.services.efs.loadbalancer.server.port=8081"

  authpostgres:
    deploy:
      placement:
        constraints:
          - "node.labels.region == ru"  # Запускаем только на NL сервере
      replicas: 1
    image: mirror.gcr.io/postgres:16.4-alpine
    container_name: authpostgres
    networks:
      - my-custom-network
    restart: always
    environment:
      - POSTGRES_DB=auth
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - "127.0.0.1:5434:5432"
    volumes:
      - pg-data-auth:/var/lib/postgresql/data

volumes:
  pg-data-auth:
    driver: local

networks:
  traefik_network:
    external: true
  my-custom-network:
    external: true